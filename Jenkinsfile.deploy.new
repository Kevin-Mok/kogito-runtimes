@Library('jenkins-pipeline-shared-libraries')_

def deployProperties = [:]

pipeline {
    agent {
        label 'kie-rhel7 && kie-mem16g'
    }
    parameters {
        string(name: 'DISPLAY_NAME', defaultValue: '', description: 'Setup a specific build display name')
        string(name: 'BUILD_BRANCH_NAME', defaultValue: 'master', description: 'Which branch to build? Set if you are not on a multibranch pipeline.')
        booleanParam(name: 'RELEASE', defaultValue: false, description: 'Is this build for a release?')
        string(name: 'PROJECT_VERSION', defaultValue: '', description: 'Optional if not RELEASE. If RELEASE, cannot be empty.')
        string(name: 'GIT_USER', defaultValue: "Jenkins CI", description: "Only used if RELEASE. Git user name to use for commit for updating project version.")
        string(name: 'GIT_USER_EMAIL', defaultValue: "jenkins@rhba-jenkins.rhev-ci-vms.eng.rdu2.redhat.com", description: "Only used if RELEASE. Git user email to use for commit for updating project version.")
        string(name: 'NEW_BRANCH_NAME', defaultValue: "", description: "Only used if RELEASE. Name for new branch to push commit to for release PR. If empty, will use PROJECT_VERSION as branch name.")
    }
    environment {
        KOGITO_CI_EMAIL_TO = credentials("KOGITO_CI_EMAIL_TO")
        PIPELINE_NAME = "Kogito Runtimes deploy pipeline"
        MAVEN_OPTS = '-Xms1024m -Xmx4g'
        COMMIT_MSG = "Update project version to ${params.PROJECT_VERSION} for release"
        PROPERTIES_FILE = "deployment.properties"
    }
    tools {
        maven 'kie-maven-3.6.2'
        jdk 'kie-jdk11'
    }
    options {
        buildDiscarder logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '5')
        timeout(time: 120, unit: 'MINUTES')
    }
    stages {
        stage("Initialize") {
            steps {
                script {
                    if (params.DISPLAY_NAME != "") {
                        currentBuild.displayName = params.DISPLAY_NAME
                    }

                    if (env.BRANCH_NAME != "") {
                        // Switch to branch if not on a multibranch pipeline
                        env.BRANCH_NAME = params.BUILD_BRANCH_NAME
                    }
                    deployProperties['release'] = params.RELEASE
                    deployProperties['project-version'] = params.PROJECT_VERSION
                    env.NEW_BRANCH = params.NEW_BRANCH_NAME
                    if (params.RELEASE) {
                        assert params.PROJECT_VERSION != ''
                        if (env.NEW_BRANCH == "") {
                            env.NEW_BRANCH = params.PROJECT_VERSION
                        }
                    }
                }
            }
        }
        stage('Clone repositories') { 
            steps {
                dir("kogito-runtimes") {
                    checkout(githubscm.resolveRepository("kogito-runtimes", "kiegroup", env.BRANCH_NAME, false))
                }
                dir("kogito-apps") {
                    checkout(githubscm.resolveRepository("kogito-apps", "kiegroup", env.BRANCH_NAME, false))
                }
                dir("kogito-examples") {
                    checkout(githubscm.resolveRepository("kogito-examples", "kiegroup", env.BRANCH_NAME, false))
                }
                // Use a separate dir for persistence to not overwrite the test results
                dir("kogito-examples-persistence") {
                    checkout(githubscm.resolveRepository("kogito-examples", "kiegroup", env.BRANCH_NAME, false))
                }
            }
        }
        stage('Setup Maven release config'){
            when {
                expression { return params.RELEASE }
            }
            steps {
                configFileProvider([configFile(fileId: '771ff52a-a8b4-40e6-9b22-d54c7314aa1e', targetLocation: 'maven-settings.xml', variable: 'MAVEN_SETTINGS_FILE')]){
                    sh "echo '-B -s ${MAVEN_SETTINGS_FILE}' | tee kogito-{runtimes,apps,examples,examples-persistence}/.mvn/maven.config"
                }
            }
        }
        stage('Update project version'){
            when {
                expression { return params.PROJECT_VERSION != '' }
            }
            steps {
                dir("kogito-runtimes") {
                    script {
                        maven.updateMavenVersion(params.PROJECT_VERSION)
                    }
                }
                dir("kogito-apps") {
                    script {
                        maven.updateMavenVersion(params.PROJECT_VERSION)
                    }
                }
                dir("kogito-examples") {
                    script {
                        maven.updateMavenVersion(params.PROJECT_VERSION)
                    }
                }
                dir("kogito-examples-persistence") {
                    script {
                        maven.updateMavenVersion(params.PROJECT_VERSION)
                    }
                }
            }
        }
        stage('Build kogito-runtimes') {
            steps {
                dir("kogito-runtimes") {
                    script {
                        maven.runMavenWithSubmarineSettings('clean install', false)
                    }
                }
            }
            post {
                always {
                    saveReports()
                }
            }
        }
        stage('Build kogito-apps') {
            steps {
                dir("kogito-apps") {
                    script {
                        maven.runMavenWithSubmarineSettings('clean install', false)
                    }
                }
            }
            post {
                always {
                    saveReports()
                }
            }
        }
        stage('Build kogito-examples') {
            steps {
                dir("kogito-examples") {
                    script {
                        maven.runMavenWithSubmarineSettings('clean install', false)
                    }
                }
            }
            post {
                always {
                    saveReports()
                }
            }
        }
        stage('Build kogito-examples with persistence') {
            steps {
                dir("kogito-examples-persistence") {
                    script {
                        maven.runMavenWithSubmarineSettings('clean install -Ppersistence', false)
                    }
                }
            }
            post {
                always {
                    saveReports()
                }
            }
        }
        stage('Build kogito-examples with events') {
            steps {
                // Use a separate dir for events to not overwrite the test results
                checkout([$class: 'GitSCM', branches: [[name: env.BRANCH_NAME]], browser: [$class: 'GithubWeb', repoUrl: 'git@github.com:kiegroup/kogito-examples.git'], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'kogito-examples-events']], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'kie-ci-user-key', url: 'git@github.com:kiegroup/kogito-examples.git']]])
                dir("kogito-examples-events") {
                    script {
                        maven.runMavenWithSubmarineSettings('clean install -Pevents', false)
                    }
                }
            }
            post {
                always {
                    saveReports()
                }
            }
        }
        stage('Create PR'){
            when {
                expression { return params.RELEASE }
            }
            steps {
                dir("kogito-runtimes") {
                    script {
                        githubscm.createBranch(env.NEW_BRANCH)
                        githubscm.commitChanges(params.GIT_USER, params.GIT_USER_EMAIL, env.COMMIT_MSG, "pom.xml")
                        githubscm.pushObject("origin", env.NEW_BRANCH)
                        deployProperties["kogito-runtimes.pr.link"] = githubscm.createPR(env.COMMIT_MSG, "master")
                    }
                }
                dir("kogito-apps") {
                    script {
                        githubscm.createBranch(env.NEW_BRANCH)
                        githubscm.commitChanges(params.GIT_USER, params.GIT_USER_EMAIL, env.COMMIT_MSG, "pom.xml")
                        githubscm.pushObject("origin", env.NEW_BRANCH)
                        deployProperties["kogito-apps.pr.link"] = githubscm.createPR(env.COMMIT_MSG, "master")
                    }
                }
                dir("kogito-examples") {
                    script {
                        githubscm.createBranch(env.NEW_BRANCH)
                        githubscm.commitChanges(params.GIT_USER, params.GIT_USER_EMAIL, env.COMMIT_MSG, "pom.xml")
                        githubscm.pushObject("origin", env.NEW_BRANCH)
                        deployProperties["kogito-examples.pr.link"] = githubscm.createPR(env.COMMIT_MSG, "master")
                    }
                }
            }
        }
        stage('Deploy artifacts') {
            steps {
                dir("kogito-runtimes") {
                    script {
                        maven.runMavenWithSubmarineSettings('clean deploy', true)
                    }
                }
                dir("kogito-apps") {
                    script {
                        maven.runMavenWithSubmarineSettings('clean deploy', true)
                    }
                }
                dir("kogito-examples") {
                    script {
                        maven.runMavenWithSubmarineSettings('clean deploy', true)
                    }
                }
            }
        }
        stage('Archive staging repository URL') {
            when {
                expression { return params.RELEASE }
            }
            steps {
                script {
                    emailext body: "${env.PIPELINE_NAME} #${env.BUILD_NUMBER} needs a staging repository URL: ${env.BUILD_URL}input",
                             subject: "${env.PIPELINE_NAME} #${env.BRANCH_NAME}",
                             to: env.KOGITO_CI_EMAIL_TO
                    deployProperties["staging-repo.url"] = input(message: "Enter staging repository URL:", parameters: [string(name: 'STAGING_REPO_URL')])
                }
            }
        }
    }
    post {
        always {
            script {
                def propertiesStr = ""
                for(entry in deployProperties) {
                    propertiesStr = "${propertiesStr}${entry.key}=${entry.value}\n"
                }
                writeFile(text: propertiesStr, file: env.PROPERTIES_FILE)
                archiveArtifacts(artifacts: env.PROPERTIES_FILE)
            }
            cleanWs()
        }
    }
}

void saveReports(boolean allowEmpty=false){
    junit testResults: '**/target/surefire-reports/**/*.xml, **/target/failsafe-reports/**/*.xml', allowEmptyResults: allowEmpty
}
