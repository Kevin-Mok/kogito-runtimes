@Library('jenkins-pipeline-shared-libraries')_

deployProperties = [:]

pipeline {
    agent {
        label 'kie-rhel7 && kie-mem16g'
    }
    environment {
        PROPERTIES_FILE_NAME = "deployment.properties"
    }
    parameters {
        string(name: 'DISPLAY_NAME', defaultValue: '', description: 'Setup a specific build display name')
        string(name: 'DEPLOY_BUILD_URL', defaultValue: '', description: 'URL to jenkins deploy build to retrieve the `deployment.properties` file. If base parameters are defined, they will override the `deployment.properties` information')
        string(name: 'BUILD_BRANCH_NAME', defaultValue: 'master', description: 'Override `deployment.properties`. Which branch to build? Set if you are not on a multibranch pipeline.')
        booleanParam(name: 'RELEASE', defaultValue: false, description: 'Override `deployment.properties`. Is this build for a release?')
        string(name: 'PROJECT_VERSION', defaultValue: '', description: 'Override `deployment.properties`. Optional if not RELEASE. If RELEASE, cannot be empty.')
        string(name: 'GIT_TAG', defaultValue: '', description: 'Git tag to set, if different from PROJECT_VERSION')
    }
    stages {
        stage('Initialization') {
            steps {
                script {
                    if (params.DISPLAY_NAME != "") {
                        currentBuild.displayName = params.DISPLAY_NAME
                    }

                    readDeployProperties()

                    if (isRelease()) {
                        assert getProjectVersion() != ''
                    }
                    if (getGitTag() != ""){
                        assert getBuildBranch() != ''
                    }
                }
            }
        }
        stage('Approve promotion') {
            when {
                expression { return isRelease() && getDeployProperty('staging-repo.url') != '' }
            }
            steps {
                script {
                    def pipelineName = "Kogito Runtimes promote pipeline"
                    withCredentials([string(credentialsId: "KOGITO_CI_EMAIL_TO", variable: 'ZULIP_EMAIL')]) {
                        emailext body: "${pipelineName} #${env.BUILD_NUMBER} is ready for promotion.\n" +
                                 "The staging repository can be found at: ${getDeployProperty('staging-repo.url')}\n" +
                                 "Approve the promotion here: ${env.BUILD_URL}input",
                                 subject: "${pipelineName} #${getBuildBranch()}",
                                 to: ZULIP_EMAIL
                    }
                    input message: "Approve for promotion?"
                }
            }
        }
        /* stage('Merge PR') { // TODO
            when {
                expression {
                    return isRelease()
                }
            }
            steps{
                script {
                    githubscm.mergePR()
                }
            }
        } */
        /* stage('Git tag') { // TODO
            when {
                expression {
                    return getGitTag() != ""
                }
            }
            steps {
                // TODO: retrieve latest BUILD_BRANCH_NAME/GIT_AUTHOR?
                githubscm.tagRepository()
            }
        } */
        /* stage('Set next snapshot') { // TODO
        } */
    }
}

//////////////////////////////////////////////////////////////////////////////
// Deployment properties
//////////////////////////////////////////////////////////////////////////////

void readDeployProperties(){
    if (params.DEPLOY_BUILD_URL != null){
        withCredentials([usernamePassword(credentialsId: 'rhba-jenkins-token', usernameVariable: 'JENKINS_USER', passwordVariable: 'JENKINS_TOKEN')]) {
            sh "wget --auth-no-challenge --user=${JENKINS_USER} --password=${JENKINS_TOKEN} ${params.DEPLOY_BUILD_URL}artifact/${PROPERTIES_FILE_NAME}"
        }
        deployProperties = readProperties file: PROPERTIES_FILE_NAME
        // echo all properties
        echo deployProperties.collect{ entry -> "${entry.key}=${entry.value}" }.join("\n")
    }
}

boolean hasDeployProperty(String key){
    return deployProperties[key] != null
}

String getDeployProperty(String key){
    if(hasDeployProperty(key)){
        return deployProperties[key]
    }
    return ""
}

String getParamOrDeployProperty(String paramKey, String deployPropertyKey){
    if (params[paramKey] != ""){
        return params[paramKey]
    }
    return getDeployProperty(deployPropertyKey)
}

//////////////////////////////////////////////////////////////////////////////
// Getter / Setter
//////////////////////////////////////////////////////////////////////////////

boolean isRelease() {
    return params.RELEASE || (getDeployProperty("release") == "true")
}

String getProjectVersion() {
    return getParamOrDeployProperty("PROJECT_VERSION", "project.version")
}

String getGitTag() {
    return params.GIT_TAG != "" ? params.GIT_TAG : getProjectVersion()
}

String getBuildBranch() {
    return getParamOrDeployProperty("BUILD_BRANCH_NAME", "git.branch")
}
